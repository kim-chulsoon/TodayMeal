<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>회원 정보 수정</title>
    <!-- jquery CDN -->
    <!-- googlrFont -->

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!--   css -->
    <!-- common  -->
    <link rel="stylesheet" href="/static/css/common.css" />
    <!-- header -->
    <link rel="stylesheet" href="/static/css/header.css" />
    <!-- 회원정보 수정 -->
    <link rel="stylesheet" href="/static/css/usersedit.css" />
    <!-- footer -->
    <link rel="stylesheet" href="/static/css/footer.css" />
  </head>
  <body>
    <!-- header include -->
    <%-include("./includes/header") %>

    <main>
      <div class="regiDiv">
        <form name="edit" class="edit" onsubmit="return editClick()">
          <div class="profileSection">
            <img
              src="/static/img/icons/profile.png"
              alt="프로필 이미지"
              class="profileImg"
              id="profileImage"
            />
            <br />
            <div class="profileP">
              <p class="pId">admin1234</p>
              <p class="pName">당근볶음</p>
            </div>
            <br />
            <!-- 숨겨진 파일 선택창 -->
            <input
              type="file"
              name="dynamicFile"
              id="dynamicFile"
              style="display: none"
              onchange="fileUpload(this)"
            />
            <!-- 버튼만 보이도록 수정 -->
            <button
              type="button"
              class="userProfileB"
              onclick="triggerFileInput()"
            >
              프로필 사진 변경
            </button>
          </div>

          <input
            type="text"
            name="userId2"
            class="userId2"
            placeholder=" 아이디"
            readonly
          />

          <div class="pwBox">
            <input
              type="password"
              name="userPw1"
              class="userPw"
              id="userPw1"
              placeholder="  패스워드"
              required
            />
          </div>
          <p class="pwP">영문 소/대문자, 숫자, !@#$ 포함 5 ~ 15자</p>

          <div class="pwBox">
            <input
              type="password"
              name="userPw2"
              class="userPw"
              id="userPw2"
              placeholder="  패스워드 확인"
              required
            />
          </div>

          <input
            type="text"
            name="userName"
            class="userName"
            placeholder="  이름"
            required
          />
          <br />
          <input
            type="date"
            name="userBirth"
            class="Birth"
            min="1970-01-01"
            max="2018-12-31"
            required
          />
          <br />
          <button type="button" class="registerB" onclick="editClick()">
            수정
          </button>
        </form>
      </div>
    </main>

    <!-- footer -->
    <%- include("./includes/footer") %>

    <script>
      // .title!!!!!!!
      document.querySelector(".title h3").innerText = "정보수정";

      //로그아웃
      function logout() {
        localStorage.clear();
        document.location.href = "/";
        console.log("로그아웃");
      }

      document.addEventListener("DOMContentLoaded", async () => {
        const token = localStorage.getItem("authToken");

        if (!token) {
          alert("로그인이 필요합니다.");
          return;
        }

        try {
          const res = await axios.get("/users/edit", {
            headers: { Authorization: `Bearer ${token}` },
          });

          if (!res.data.success) {
            alert("사용자 정보를 불러올 수 없습니다.");
            return;
          }

          const user = res.data.user;

          // 데이터를 사용해 동적으로 콘텐츠 생성
          document.querySelector(".pId").innerText = user.userId;
          document.querySelector(".pName").innerText = user.name;
          document.querySelector("#profileImage").src =
            user.profileImage || "/static/img/icons/profile.png";
          document.querySelector(".userId2").value = user.userId;
          document.querySelector(".userName").value = user.name;
          document.querySelector(".Birth").value = user.birthdate;
        } catch (err) {
          console.error("Error fetching user edit page:", err);
          alert("서버 오류 발생. 다시 시도해주세요.");
        }
      });

      // 프로필 사진 업로드
      function triggerFileInput() {
        document.getElementById("dynamicFile").click();
      }

      //파일 업로드
      function fileUpload(input) {
        //const fileInput = document.getElementById("dynamicFile");
        const userId = document.querySelector(".userId2").value;

        const file = input.files[0];
        if (!file) {
          alert("업로드할 파일을 선택하세요.");
          return;
        }

        const formData = new FormData();
        formData.append("dynamicFile", file);

        axios
          .post("/users/dynamicUpload", formData, {
            headers: { "Content-Type": "multipart/form-data" },
          })
          .then((res) => {
            document.querySelector("#profileImage").src = "\\" + res.data;
            console.log("파일경로", "/" + res.data);
          })
          .catch((err) => {
            console.error("File upload error:", err);
            alert("파일 업로드에 실패했습니다.");
          });
      }

      async function editClick() {
        try {
          const form = document.forms["edit"];
          const userId = form.userId2.value.trim();
          const userPw1 = form.userPw1.value;
          const userPw2 = form.userPw2.value;
          const userName = form.userName.value.trim();
          const userBirth = form.userBirth.value;

          // 현재 이미지 src 값 가져오기
          const imgSrc = document.querySelector("#profileImage").src;
          // URL 객체를 사용해 파싱
          const parsedUrl = new URL(imgSrc);
          const relativePath = parsedUrl.pathname;

          console.log("경로:", relativePath);

          if (!userId || !userPw1 || !userPw2 || !userName || !userBirth) {
            alert("모든 항목을 입력해주세요");
            return false;
          }

          const regPw =
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$])[A-Za-z\d!@#$]{5,15}$/;
          if (!regPw.test(userPw1)) {
            alert(
              "비밀번호는 영문 소/대문자, 숫자, !@#$ 포함 5 ~ 15자여야 합니다.",
            );
            return false;
          }

          if (userPw1 !== userPw2) {
            alert("비밀번호가 일치하지 않습니다.");
            return false;
          }

          const res = await axios.patch("/users", {
            userId,
            newUserPw: userPw1,
            newName: userName,
            newBirthdate: userBirth,
            profileImage: relativePath,
          });

          if (res.data.success) {
            alert("정보수정 성공");
            form.reset();
            document.location.href = "/";
          } else {
            alert("정보수정 실패했습니다.");
          }
        } catch (err) {
          console.error("Error updating user:", err);
          alert("서버 오류 발생. 다시 시도해주세요.");
        }
      }
    </script>
  </body>
</html>
